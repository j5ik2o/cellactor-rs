openapi: 3.0.3
info:
  title: Cellactor Actor Core Control Plane
  version: 0.1.0
  description: |
    ActorSystem スコープ、メールボックス、Supervision を検証するための管理 API 契約。
    ライブラリ利用者が統合テストで仕様を満たしているかを確認することを目的とする。
servers:
  - url: https://example.invalid/actor-core
    description: 組込みターゲット向けモックサーバ
paths:
  /actor-system/scopes:
    post:
      summary: ActorSystem スコープを生成する
      description: ActorSystem のスコープを起動し、ライフタイム境界内で利用するためのトークンを取得する。
      operationId: createScope
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScopeCreateRequest'
      responses:
        '201':
          description: スコープ生成に成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScopeDescriptor'
        '400':
          description: 無効な設定 (capacity=0 等)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /actor-system/scopes/{scopeId}/mailboxes:
    post:
      summary: スコープ内アクターのメールボックス設定を登録する
      description: メールボックス/Dispatcher 構成を適用し、バックプレッシャーとメトリクスしきい値を返す。
      operationId: configureMailbox
      parameters:
        - in: path
          name: scopeId
          schema:
            type: string
          required: true
          description: `ScopeDescriptor.scopeId`
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MailboxConfigRequest'
      responses:
        '202':
          description: メールボックス設定を受理
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MailboxConfigResult'
        '404':
          description: スコープが存在しないかクローズ済み
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /actor-system/scopes/{scopeId}/supervision/probes:
    post:
      summary: Supervision 戦略を検証するための失敗プローブを実行
      description: 指定した失敗シナリオでアクターを動かし、最終決定 (Restart/Stop 等) を返す。
      operationId: runSupervisionProbe
      parameters:
        - in: path
          name: scopeId
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SupervisionProbeRequest'
      responses:
        '200':
          description: プローブ完了
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupervisionProbeResult'
        '409':
          description: スコープが backpressure または停止状態
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /event-stream/publish:
    post:
      summary: EventStream にイベントを publish しメトリクスを確認
      description: BackpressureHint を確認するための擬似 publish エンドポイント。
      operationId: publishEvent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventPublishRequest'
      responses:
        '202':
          description: イベントがキューに受理された
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventPublishResult'
        '429':
          description: バックプレッシャーにより遅延またはドロップ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackpressureResponse'
components:
  schemas:
    ScopeCreateRequest:
      type: object
      required: [systemName, guardianBehavior]
      properties:
        systemName:
          type: string
          pattern: '^[a-zA-Z0-9_-]{1,32}$'
        guardianBehavior:
          $ref: '#/components/schemas/BehaviorDescriptor'
        observationMode:
          type: string
          enum: [Immediate, Buffered]
          default: Immediate
    ScopeDescriptor:
      type: object
      required: [scopeId, actorSystemRef, expiresAt]
      properties:
        scopeId:
          type: string
        actorSystemRef:
          type: string
          description: ライブラリ内部で `ActorRef<'scope, _>` にマッピングされるトークン
        expiresAt:
          type: string
          format: date-time
        metricsEndpoint:
          type: string
          format: uri
    BehaviorDescriptor:
      type: object
      required: [init, next]
      properties:
        init:
          type: string
          description: 初期化関数の識別子
        next:
          type: string
          description: メッセージハンドラの識別子
        supervision:
          $ref: '#/components/schemas/SupervisionPolicy'
        mailbox:
          $ref: '#/components/schemas/MailboxPolicy'
    MailboxPolicy:
      type: object
      required: [kind, overflow]
      properties:
        kind:
          type: string
          enum: [Bounded, Unbounded, Priority]
        capacity:
          type: integer
          minimum: 1
        overflow:
          type: string
          enum: [DropNewest, DropOldest, Grow, Block]
          description: Block は HostAsync ランタイム構成で AsyncQueue バックエンドを用いる場合のみ選択可能
        stashCapacity:
          type: integer
          minimum: 0
        systemPriorityRatio:
          type: integer
          minimum: 0
          maximum: 100
    MailboxConfigRequest:
      type: object
      required: [actorRef, mailbox]
      properties:
        actorRef:
          type: string
        mailbox:
          $ref: '#/components/schemas/MailboxPolicy'
        dispatcher:
          $ref: '#/components/schemas/DispatcherConfig'
    DispatcherConfig:
      type: object
      required: [name, throughput]
      properties:
        name:
          type: string
        throughput:
          type: integer
          minimum: 1
        fairness:
          type: string
          enum: [RoundRobin, WorkStealing]
        mode:
          type: string
          enum: [CoreSync, HostAsync]
          description: Block overflow を伴う MailboxPolicy を適用する場合は HostAsync モードを必須とする
    MailboxConfigResult:
      type: object
      required: [status, appliedPolicy, fairnessScore]
      properties:
        status:
          type: string
          enum: [Accepted]
        appliedPolicy:
          $ref: '#/components/schemas/MailboxPolicy'
        fairnessScore:
          type: number
          format: float
        backpressureHint:
          $ref: '#/components/schemas/BackpressureHint'
    SupervisionPolicy:
      type: object
      required: [mode, restartLimit]
      properties:
        mode:
          type: string
          enum: [OneForOne, AllForOne]
        restartLimit:
          type: object
          required: [maxRestarts, withinSeconds]
          properties:
            maxRestarts:
              type: integer
              minimum: 0
            withinSeconds:
              type: integer
              minimum: 0
        decider:
          type: string
          description: 登録済みデシジョン識別子
    SupervisionProbeRequest:
      type: object
      required: [actorRef, failure]
      properties:
        actorRef:
          type: string
        failure:
          type: string
          enum: [Transient, Permanent, Fatal]
        attemptCount:
          type: integer
          minimum: 1
    SupervisionProbeResult:
      type: object
      required: [decision, restartCount]
      properties:
        decision:
          type: string
          enum: [Restart, Stop, Resume, Escalate]
        restartCount:
          type: integer
        emittedMetrics:
          type: array
          items:
            $ref: '#/components/schemas/SupervisionMetric'
    SupervisionMetric:
      type: object
      required: [name, value]
      properties:
        name:
          type: string
        value:
          type: number
    EventPublishRequest:
      type: object
      required: [eventType, payload]
      properties:
        eventType:
          type: string
        payload:
          type: object
          additionalProperties: true
        scopeId:
          type: string
        priority:
          type: string
          enum: [User, System]
    EventPublishResult:
      type: object
      required: [status, queueDepth]
      properties:
        status:
          type: string
          enum: [Enqueued]
        queueDepth:
          type: integer
        observation:
          $ref: '#/components/schemas/EventStreamMetric'
    EventStreamMetric:
      type: object
      required: [category, count]
      properties:
        category:
          type: string
          enum: [Publish, Drop, Subscribe, Unsubscribe, Backpressure]
        count:
          type: integer
    BackpressureHint:
      type: object
      required: [kind]
      properties:
        kind:
          type: string
          enum: [Defer, Drop, Retry]
        delayMillis:
          type: integer
          minimum: 0
    BackpressureResponse:
      type: object
      required: [status, hint]
      properties:
        status:
          type: string
          enum: [Backpressured]
        hint:
          $ref: '#/components/schemas/BackpressureHint'
    ErrorResponse:
      type: object
      required: [errorCode, message]
      properties:
        errorCode:
          type: string
        message:
          type: string
